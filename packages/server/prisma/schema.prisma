// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator zod {
  provider              = "zod-prisma"
  output                = "../../shared/src/schemas" // (default) the directory where generated zod schemas will be saved
  relationModel         = true // (default) Create and export both plain and related models.
  modelCase             = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  modelSuffix           = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas
  useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                  @id @default(autoincrement())
  twitterId         String               @unique
  name              String
  username          String               @unique
  email             String               @unique
  profile_image_url String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  apiKey            String?              @unique
  tweets            Tweet[]
  summaries         Summary[]
  recommendations   UserRecommendation[]
  votes             Vote[]
  notes             Note[]
  followers         Follow[]             @relation("Followed")
  following         Follow[]             @relation("Follower")
  queries           Query[]
}

model Tweet {
  id        Int      @id @default(autoincrement())
  tweetId   Int      @unique
  tweetedAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  data      Json
  summaryId Int?
  summary   Summary? @relation(fields: [summaryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Summary {
  id                    Int      @id @default(autoincrement())
  userId                Int
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  public                Boolean
  content               String
  useForRecommendations Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  queries               Query[]
  tweets                Tweet[]
}

model Query {
  id                    Int                           @id @default(autoincrement())
  summaryId             Int?
  summary               Summary?                      @relation(fields: [summaryId], references: [id], onDelete: Cascade)
  text                  String
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  public                Boolean
  recommendationSources QueryToRecommendationSource[]
  subQueries            SubQuery[]
  userId                Int
  user                  User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RecommendationType {
  youtube
  article
}

model SubQuery {
  id              Int              @id @default(autoincrement())
  queryId         Int
  query           Query            @relation(fields: [queryId], references: [id], onDelete: Cascade)
  text            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  recommendations Recommendation[]
  public          Boolean
}

model Recommendation {
  id                     Int                  @id @default(autoincrement())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  type                   RecommendationType
  data                   Json
  sourceId               Int
  source                 RecommendationSource @relation(fields: [recommendationSourceId], references: [id], onDelete: Cascade)
  votes                  Vote[]
  notes                  Note[]
  userRecommendations    UserRecommendation[] @relation("UserRecommendation")
  recommendationSourceId Int
  public                 Boolean
  subQueryId             Int
  subQuery               SubQuery             @relation(fields: [subQueryId], references: [id], onDelete: Cascade)
}

model RecommendationSource {
  id              Int                           @id @default(autoincrement())
  externalId      String                        @unique
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  type            RecommendationType
  data            Json
  recommendations Recommendation[]
  queries         QueryToRecommendationSource[]
}

model QueryToRecommendationSource {
  id                     Int                  @id @default(autoincrement())
  queryId                Int
  query                  Query                @relation(fields: [queryId], references: [id], onDelete: Cascade)
  recommendationSourceId Int
  recommendationSource   RecommendationSource @relation(fields: [recommendationSourceId], references: [id], onDelete: Cascade)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

model UserRecommendation {
  userId           Int
  recommendationId Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendation   Recommendation @relation("UserRecommendation", fields: [recommendationId], references: [id], onDelete: Cascade)

  viewed Boolean @default(false)

  @@id([userId, recommendationId])
}

model Vote {
  id               Int            @id @default(autoincrement())
  userId           Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendationId Int
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  vote             Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Note {
  id               Int            @id @default(autoincrement())
  userId           Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendationId Int
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  content          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum FollowType {
  likes
  relevant
  all
}

model Follow {
  id         Int        @id @default(autoincrement())
  userId     Int
  user       User       @relation(name: "Follower", fields: [userId], references: [id], onDelete: Cascade)
  followId   Int
  follow     User       @relation(name: "Followed", fields: [followId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  followType FollowType
}

enum TaskStatus {
  retrying
  running
  completed
  failed
}

model PipelineRun {
  id        Int            @id @default(autoincrement())
  jobKeyId  String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  username  String
  tasks     PipelineTask[]
  status    TaskStatus     @default(running)
}

model PipelineTask {
  id            Int               @id @default(autoincrement())
  jobId         String            @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  pipelineRunId Int
  pipelineRun   PipelineRun       @relation(fields: [pipelineRunId], references: [id], onDelete: Cascade)
  name          String
  status        TaskStatus        @default(running)
  logs          PipelineTaskLog[]
  costInMillicents Int?
}

model PipelineTaskLog {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  pipelineTaskId Int
  pipelineTask   PipelineTask @relation(fields: [pipelineTaskId], references: [id], onDelete: Cascade)
  level          String
  log            String
}
